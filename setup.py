#!/usr/bin/env python

import os
import sys
import subprocess
from setuptools import setup, Extension
import numpy


# Change version number here, not in axographio/version.py, which is generated
# by this script. Try to follow recommended versioning guidelines at semver.org.
MAJOR       = 0     # increment for backwards-incompatible changes
MINOR       = 2     # increment for backwards-compatible feature additions
MICRO       = 0     # increment for backwards-compatible bug fixes
IS_RELEASED = False # determines whether version will be marked as development
VERSION     = '%d.%d.%d' % (MAJOR, MINOR, MICRO)


# Set a global variable so that axographio/__init__.py can detect if it is being
# loaded by the setup routine (which can happen below if axographio.version must
# be imported), to avoid attempting to load the extension before it is built.
if sys.version_info[0] >= 3:
    import builtins
else:
    import __builtin__ as builtins
builtins.__AXOGRAPHIO_SETUP__ = True


# This function may be used below to query git for a revision number.
def _minimal_ext_cmd(cmd):
    '''Run an external command and return the result.'''
    # construct minimal environment
    env = {}
    for k in ['SYSTEMROOT', 'PATH', 'HOME']:
        v = os.environ.get(k)
        if v is not None:
            env[k] = v
    # LANGUAGE is used on win32
    env['LANGUAGE'] = 'C'
    env['LANG'] = 'C'
    env['LC_ALL'] = 'C'
    out = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=env).communicate()[0]
    return out


# Try to fetch the git revision number from the .git directory if it exists.
if os.path.exists('.git'):
    try:
        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])
        GIT_REVISION = out.strip().decode('ascii')
    except OSError:
        GIT_REVISION = "Unknown"
# If the .git directory is absent (perhaps because this is a source distro),
# try to fetch the rev number from axographio/version.py where it may have been
# stored during packaging.
elif os.path.exists('axographio/version.py'):
    try:
        # It is important that accessing the axographio package this way does
        # not trigger an attempt to load the extension before it is build. This
        # is the reason for __AXOGRAPHIO_SETUP__, which axographio/__init__.py
        # will detect and prevent loading the extension, after git_revision is
        # loaded.
        from axographio.version import git_revision as GIT_REVISION
    except ImportError:
        raise ImportError("Unable to import git_revision. Try removing " \
                          "axographio/version.py and the build directory " \
                          "before building.")
else:
    GIT_REVISION = "Unknown"


# If this is not a release version, mark it as a development build/distro and
# tag it with the git revision number.
if not IS_RELEASED:
    VERSION += '.dev0+' + GIT_REVISION[:7]


# Write the version string to a file that will be included with the
# build/distro. This makes the string accessible to the package via
# axographio.__version__. The git revision is also written in case a source
# distro is being built, so that it can be fetched later during installation.
with open("axographio/version.py", "w") as f:
    try:
        f.write("'''THIS FILE WAS GENERATED BY SETUP.PY DURING BUILDING/PACKAGING'''\n")
        f.write("version = '%s'\n" % VERSION)
        f.write("git_revision = '%s'\n" % GIT_REVISION)
    finally:
        f.close()


# Read in the README to serve as the long_description, which will be presented
# on pypi.org as the project description.
with open("README.rst", "r") as f:
    README = f.read()


setup(
    name = "axographio",
    version = VERSION,
    setup_requires   = ['numpy', 'cython>=0.19'],   # needed to build axographio
    install_requires = ['numpy'],                   # needed to run axographio
    packages = ['axographio', 'axographio.tests'],
    ext_modules = [
        Extension('axographio.extension', [
            'axographio/extension.pyx',
            'axographio/include/axograph_readwrite/fileUtils.cpp',
            'axographio/include/axograph_readwrite/byteswap.cpp',
            'axographio/include/axograph_readwrite/stringUtils.cpp',
            'axographio/include/axograph_readwrite/AxoGraph_ReadWrite.cpp'],
            language='c++', include_dirs=[numpy.get_include()],
            define_macros=[('NO_CARBON',1)]
            )
        ],
    test_suite = 'axographio.tests.test_axographio.test_all',
    # metatdata
    author = "Kendrick Shaw, Jeffrey Gill",
    author_email = "kms15@case.edu, jeffrey.p.gill@gmail.com",
    maintainer = "Jeffrey Gill",
    maintainer_email = "jeffrey.p.gill@gmail.com",
    license = "BSD License",
    keywords = ["physiology","electrophysiology","axograph"],
    url = "https://github.com/CWRUChielLab/axographio",
    description = "A Python package for reading and writing AxoGraph data files",
    long_description = README,
    classifiers = [
        "Programming Language :: Python",
        "Programming Language :: Python :: 2",
        "Programming Language :: Python :: 3",
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Intended Audience :: Science/Research",
        "License :: OSI Approved :: BSD License",
        "Topic :: Scientific/Engineering :: Bio-Informatics"
        ]
    )

# This may avoid problems where axographio is installed via ``*_requires`` by
# setuptools, the global namespace isn't reset properly, and then axographio is
# imported later (which will then fail to load the axographio extension module).
del builtins.__AXOGRAPHIO_SETUP__
